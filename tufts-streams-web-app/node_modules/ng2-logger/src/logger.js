"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
var level_1 = require("./level");
var display_1 = require("./display");
var include_1 = require("./include");
var Logger = (function () {
    function Logger(name, color, developmentMode, allowed, isMuted, fixedWidth, display) {
        var _this = this;
        this.name = name;
        this.color = color;
        this.developmentMode = developmentMode;
        this.allowed = allowed;
        this.isMuted = isMuted;
        this.fixedWidth = fixedWidth;
        this.display = display;
        /** @deprecated Use data(...)
         * @see data
        */
        this.d = function (name) {
            var data = [];
            for (var _i = 1; _i < arguments.length; _i++) {
                data[_i - 1] = arguments[_i];
            }
            return _this._data(name, data);
        };
        /** @deprecated Use error(...)
         * @see error
        */
        this.er = function (name) {
            var data = [];
            for (var _i = 1; _i < arguments.length; _i++) {
                data[_i - 1] = arguments[_i];
            }
            return _this._error(name, data);
        };
        /** @deprecated Use info(...)
         * @see info
        */
        this.i = function (name) {
            var data = [];
            for (var _i = 1; _i < arguments.length; _i++) {
                data[_i - 1] = arguments[_i];
            }
            return _this._info(name, data);
        };
        /** @deprecated Use warn(...)
         * @see warn
        */
        this.w = function (name) {
            var data = [];
            for (var _i = 1; _i < arguments.length; _i++) {
                data[_i - 1] = arguments[_i];
            }
            return _this._warn(name, data);
        };
        /**
         * Logs message and data with the level=data
         * @param message The message
         * @param otherParams Additional parameters
         */
        this.data = function (message) {
            var otherParams = [];
            for (var _i = 1; _i < arguments.length; _i++) {
                otherParams[_i - 1] = arguments[_i];
            }
            return _this._data(message, otherParams);
        };
        /**
         * Logs message and data with the level=error
         * @param message The message
         * @param otherParams Additional parameters
         */
        this.error = function (message) {
            var otherParams = [];
            for (var _i = 1; _i < arguments.length; _i++) {
                otherParams[_i - 1] = arguments[_i];
            }
            return _this._error(message, otherParams);
        };
        /**
         * Logs message and data with the level=info
         * @param message The message
         * @param otherParams Additional parameters
         */
        this.info = function (message) {
            var otherParams = [];
            for (var _i = 1; _i < arguments.length; _i++) {
                otherParams[_i - 1] = arguments[_i];
            }
            return _this._info(message, otherParams);
        };
        /**
         * Logs message and data with the level=warn
         * @param message The message
         * @param otherParams Additional parameters
         */
        this.warn = function (message) {
            var otherParams = [];
            for (var _i = 1; _i < arguments.length; _i++) {
                otherParams[_i - 1] = arguments[_i];
            }
            return _this._warn(message, otherParams);
        };
    }
    Logger.prototype._data = function (name) {
        var data = [];
        for (var _i = 1; _i < arguments.length; _i++) {
            data[_i - 1] = arguments[_i];
        }
        if (this.allowed.length >= 1 && include_1.contain(this.allowed, level_1.Level.__NOTHING)
            && !include_1.contain(this.allowed, level_1.Level.DATA))
            return this;
        if (Logger.isProductionMode)
            return this;
        if (this.display !== undefined)
            this.display(name, data, level_1.Level.DATA, this.name);
        else if (this.allowed.length === 0 || include_1.contain(this.allowed, level_1.Level.DATA)) {
            display_1.Display.msg.apply(undefined, [name].concat(data, [this.name, this.color, level_1.Level.DATA, this.fixedWidth]));
        }
        return this;
    };
    Logger.prototype._error = function (name) {
        var data = [];
        for (var _i = 1; _i < arguments.length; _i++) {
            data[_i - 1] = arguments[_i];
        }
        if (this.allowed.length >= 1 && include_1.contain(this.allowed, level_1.Level.__NOTHING)
            && !include_1.contain(this.allowed, level_1.Level.ERROR))
            return this;
        if (Logger.isProductionMode)
            return this;
        if (this.display !== undefined)
            this.display(name, data, level_1.Level.ERROR, this.name);
        else if (this.allowed.length === 0 || include_1.contain(this.allowed, level_1.Level.ERROR)) {
            display_1.Display.msg.apply(undefined, [name].concat(data, [this.name, this.color, level_1.Level.ERROR, this.fixedWidth]));
        }
        return this;
    };
    Logger.prototype._info = function (name) {
        var data = [];
        for (var _i = 1; _i < arguments.length; _i++) {
            data[_i - 1] = arguments[_i];
        }
        if (this.allowed.length >= 1 && include_1.contain(this.allowed, level_1.Level.__NOTHING)
            && !include_1.contain(this.allowed, level_1.Level.INFO))
            return this;
        if (Logger.isProductionMode)
            return this;
        if (this.display !== undefined)
            this.display(name, data, level_1.Level.INFO, this.name);
        else if (this.allowed.length === 0 || include_1.contain(this.allowed, level_1.Level.INFO)) {
            display_1.Display.msg.apply(undefined, [name].concat(data, [this.name, this.color, level_1.Level.INFO, this.fixedWidth]));
        }
        return this;
    };
    Logger.prototype._warn = function (name) {
        var data = [];
        for (var _i = 1; _i < arguments.length; _i++) {
            data[_i - 1] = arguments[_i];
        }
        if (this.allowed.length >= 1 && include_1.contain(this.allowed, level_1.Level.__NOTHING)
            && !include_1.contain(this.allowed, level_1.Level.WARN))
            return this;
        if (Logger.isProductionMode)
            return this;
        if (this.display !== undefined)
            this.display(name, data, level_1.Level.WARN, this.name);
        else if (this.allowed.length === 0 || include_1.contain(this.allowed, level_1.Level.WARN)) {
            display_1.Display.msg.apply(undefined, [name].concat(data, [this.name, this.color, level_1.Level.WARN, this.fixedWidth]));
        }
        return this;
    };
    Logger.prototype._logMessage = function (name, level) {
        var data = [];
        for (var _i = 2; _i < arguments.length; _i++) {
            data[_i - 2] = arguments[_i];
        }
        if (this.isMuted)
            return this;
        if (this.allowed.length >= 1 && include_1.contain(this.allowed, level)
            && !include_1.contain(this.allowed, level))
            return this;
        if (Logger.isProductionMode)
            return this;
        if (this.display !== undefined)
            this.display(name, data, level, this.name);
        else if (this.allowed.length === 0 || include_1.contain(this.allowed, level)) {
            display_1.Display.msg(name, data, this.name, this.color, level, this.fixedWidth);
        }
        return this;
    };
    Logger.prototype.level = function (l) {
        this._level = l;
        return this;
    };
    Logger.prototype.mute = function () {
        this.isMuted = true;
    };
    return Logger;
}());
Logger.isProductionMode = false;
exports.Logger = Logger;
//# sourceMappingURL=logger.js.map